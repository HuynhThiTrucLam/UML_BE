#!/bin/bash

# Create a new migration with a descriptive name
echo "Creating a migration for updating PersonalInforDocument schema..."
alembic revision -m "update_personal_infor_document_schema"

# Get the most recent migration file
MIGRATION_FILE=$(ls -t migrations/versions/*.py | head -1)

echo "Created migration file: $MIGRATION_FILE"
echo "Now editing the migration file to update the schema..."

# Edit the migration file with the schema changes
cat > "$MIGRATION_FILE" << 'EOF'
"""update_personal_infor_document_schema

Revision ID: $(basename "$MIGRATION_FILE" | cut -d '_' -f 1)
Revises: c686b3bcf2df
Create Date: $(date +"%Y-%m-%d %H:%M:%S.%3N")

"""
from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision = '$(basename "$MIGRATION_FILE" | cut -d '_' -f 1)'
down_revision = 'c686b3bcf2df'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Create temporary UUID columns for id and user_id
    op.add_column('personal_infor_documents', sa.Column('id_new', sa.UUID(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('user_id_new', sa.UUID(), nullable=True))
    
    # Step 2: Add the new columns 
    op.add_column('personal_infor_documents', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('date_of_birth', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('gender', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('address', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('identity_number', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('identity_img_front', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('identity_img_back', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('avatar', sa.String(), nullable=True))
    
    # Step 3: Convert existing rows - need to execute raw SQL for data conversion
    conn = op.get_bind()
    conn.execute(sa.text("""
        UPDATE personal_infor_documents 
        SET id_new = uuid_generate_v4(),
            user_id_new = (SELECT id FROM users WHERE id = personal_infor_documents.user_id::uuid),
            identity_number = document_type,
            identity_img_front = document_url
    """))
    
    # Step 4: Drop old columns and rename new ones
    op.drop_column('personal_infor_documents', 'document_type')
    op.drop_column('personal_infor_documents', 'document_url')
    
    # Step 5: Remove the old id and user_id columns and make the new ones primary key
    # First drop foreign key constraint
    op.drop_constraint('personal_infor_documents_user_id_fkey', 'personal_infor_documents', type_='foreignkey')
    
    # Then drop the old columns (need to drop primary key first)
    op.drop_constraint('personal_infor_documents_pkey', 'personal_infor_documents', type_='primary')
    op.drop_column('personal_infor_documents', 'id')
    op.drop_column('personal_infor_documents', 'user_id')
    
    # Rename new columns
    op.alter_column('personal_infor_documents', 'id_new', new_column_name='id')
    op.alter_column('personal_infor_documents', 'user_id_new', new_column_name='user_id')
    
    # Create new primary key and foreign key
    op.create_primary_key('personal_infor_documents_pkey', 'personal_infor_documents', ['id'])
    op.create_foreign_key('personal_infor_documents_user_id_fkey', 'personal_infor_documents', 'users', ['user_id'], ['id'])
    
    # Create index on id
    op.create_index(op.f('ix_personal_infor_documents_id'), 'personal_infor_documents', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Create temporary Integer columns
    op.add_column('personal_infor_documents', sa.Column('id_old', sa.Integer(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('user_id_old', sa.Integer(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('document_type', sa.String(), nullable=True))
    op.add_column('personal_infor_documents', sa.Column('document_url', sa.String(), nullable=True))
    
    # Step 2: Convert data
    conn = op.get_bind()
    conn.execute(sa.text("""
        UPDATE personal_infor_documents 
        SET id_old = CAST(SUBSTR(id::text, 1, 8) AS INTEGER),
            user_id_old = (SELECT CAST(SUBSTR(id::text, 1, 8) AS INTEGER) FROM users WHERE id = personal_infor_documents.user_id),
            document_type = COALESCE(identity_number, ''),
            document_url = COALESCE(identity_img_front, '')
    """))
    
    # Step 3: Drop new columns
    op.drop_constraint('personal_infor_documents_user_id_fkey', 'personal_infor_documents', type_='foreignkey')
    op.drop_constraint('personal_infor_documents_pkey', 'personal_infor_documents', type_='primary')
    op.drop_index(op.f('ix_personal_infor_documents_id'), table_name='personal_infor_documents')
    
    op.drop_column('personal_infor_documents', 'id')
    op.drop_column('personal_infor_documents', 'user_id')
    op.drop_column('personal_infor_documents', 'full_name')
    op.drop_column('personal_infor_documents', 'date_of_birth')
    op.drop_column('personal_infor_documents', 'gender')
    op.drop_column('personal_infor_documents', 'address')
    op.drop_column('personal_infor_documents', 'identity_number')
    op.drop_column('personal_infor_documents', 'identity_img_front')
    op.drop_column('personal_infor_documents', 'identity_img_back')
    op.drop_column('personal_infor_documents', 'avatar')
    
    # Step 4: Rename old columns
    op.alter_column('personal_infor_documents', 'id_old', new_column_name='id')
    op.alter_column('personal_infor_documents', 'user_id_old', new_column_name='user_id')
    
    # Step 5: Create primary key and foreign key constraints
    op.create_primary_key('personal_infor_documents_pkey', 'personal_infor_documents', ['id'])
    op.create_foreign_key('personal_infor_documents_user_id_fkey', 'personal_infor_documents', 'users', ['user_id'], ['id'])
    op.create_index(op.f('ix_personal_infor_documents_id'), 'personal_infor_documents', ['id'], unique=False)
    # ### end Alembic commands ###
EOF

echo "Migration file created successfully."
echo "Before running the migration, make sure the uuid_generate_v4() function is available in your PostgreSQL instance."
echo "You can create it with: CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
echo "You can then run 'alembic upgrade heads' to apply the migration."